import TelegramApiBot from 'node-telegram-bot-api'
import fs from 'fs'

import {checkoutExistanse} from './helpers/checkoutExistanse.js'
import {Scrapper} from './helpers/queueTasker.js'


import jsonAuth from './auth.json' assert {type: "json"}
import accsTw from './activeTwitterAccs.json' assert {type: "json"}


let arrayOfAccs = [...accsTw.accs]

const botTG = new TelegramApiBot(jsonAuth.TGBotToken, {polling: true})


const scrapper = new Scrapper(arrayOfAccs, botTG, jsonAuth.chatId)
scrapper.startScrapping()


botTG.setMyCommands([
    {command: '/start', description: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ  –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.'},
    {command: '/list', description: '–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã.'}
])

botTG.on('message', async (msg) => {
    const msgText = msg.text
    
    const chatId = msg.chat.id

    if (msgText == '/start') {
        // Save chatId locally ----------------------------------------
        const newAuthJson = {
            ...jsonAuth,
            chatId
        }
        fs.writeFileSync('./auth.json', JSON.stringify(newAuthJson))
        scrapper.setchatId(chatId)
        // ------------------------------------------------------------

        botTG.sendMessage(chatId, 'üßë‚Äçüíª–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –±–æ—Ç –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É —Ç–≤–∏—Ç—Ç–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n\n‚úèÔ∏è–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç –º–Ω–µ —Ç–≤–∏—Ç—Ç–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—É(–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞), –ø—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–∏–∫ –∏ –ø—Ä–∏–ø–∏—à–∏ –∫ –Ω–µ–º—É –≤–Ω–∞—á–∞–ª–µ: /add-\n\n–ü—Ä–∏–º–µ—Ä: /add-elonmusk\n\n‚úèÔ∏è–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞–ø–∏—à–∏: /list\n\n\n–ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 10 —Å–µ–∫—É–Ω–¥, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n\n\n‚ö†Ô∏è–ù–µ–±–æ–ª—å—à–∞—è —Ä–µ–º–∞—Ä–∫–∞: –ú–Ω–µ –ø–æ–∫–∞ –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è—Ç–Ω–æ, –∫–∞–∫–æ–π –ø—Ä–µ–¥–µ–ª —É —ç—Ç–æ–≥–æ —Å–æ—Ñ—Ç–∞ —Å –¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π, –ø–æ—ç—Ç–æ–º—É, –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—à—É, –Ω–µ —Å—Ç–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ 40 –∞–∫–∫–æ–≤. –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø—Ä–æ—à—É –∫ –º–æ–µ–º—É —à–∞–ª–∞—à—É @Enit047')
    } else if (msgText.includes('/add-') && msgText.replace(/\/add-/, '')) {
        const twitterAcc = msgText.replace(/\/add-/, '')

        const alreadyHaveAcc = arrayOfAccs.find(acc => acc == twitterAcc)
        
        if (alreadyHaveAcc) {
            botTG.sendMessage(chatId, `‚ö†Ô∏è–ê–∫–∫–∞—É–Ω—Ç (${twitterAcc}) —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –¥–æ —ç—Ç–æ–≥–æ`)
        } else if (arrayOfAccs.length >= 40) {
            botTG.sendMessage(chatId, `‚ö†Ô∏è–≠–π, –ø–æ–≥–æ–¥–∏, –¥—Ä—É–∂–æ—á–µ–∫, –ª–∏–º–∏—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –±—ã–ª –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–æ 25 –∞–∫–∫–∞—É–Ω—Ç–æ–≤.`)
        } else {

            const existPage = await checkoutExistanse(twitterAcc)

            if (existPage) {
                botTG.sendMessage(chatId, `‚ùå –ß—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫ —Å (${twitterAcc}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ twitter username!`)
            } else {
                arrayOfAccs.push(twitterAcc)
            
                const newTwitterLinks = {
                    accs: arrayOfAccs
                }
                
                fs.writeFileSync('./activeTwitterAccs.json', JSON.stringify(newTwitterLinks))

                botTG.sendMessage(chatId, `‚úÖ–ê–∫–∫–∞—É–Ω—Ç (${twitterAcc}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω`)
                
                // max amount

                // Restart with new params --------------------------------------------------
                scrapper.startScrapping(arrayOfAccs)
                // --------------------------------------------------------------------------
            }
        }
    } else if(msgText == '/list') {
        const strText = `üìã–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö —Ç–≤–∏—Ç—Ç–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (${arrayOfAccs.length}):\n\n\n`
        let newlist
        if (arrayOfAccs.length) {
            newlist = arrayOfAccs.map(acc => acc + '\n\n').join('')
        } else {
            newlist = '–ü–£–°–¢–û'
        }
        botTG.sendMessage(chatId, strText + newlist)
    } else if (msgText.includes('/delete-')) {
        deleteB(chatId, msgText)
    }
})

botTG.on('callback_query', msg => {
    const chatId = msg.message.chat.id
    const data = msg.data

    if (data.includes('/delete-')) {
        deleteB(chatId, data)
    }
})


function deleteB(id, msgText) {
    const twitterAccDel = msgText.replace(/\/delete-/, '')
        
    arrayOfAccs = arrayOfAccs.filter(acc => acc !== twitterAccDel)

    const newTwitterLinks = {
        accs: arrayOfAccs
    }

    fs.writeFileSync('./activeTwitterAccs.json', JSON.stringify(newTwitterLinks))
    
    botTG.sendMessage(id, `‚ùóÔ∏è–ê–∫–∫–∞—É–Ω—Ç: ${twitterAccDel} –±—ã–ª —É–¥–∞–ª—ë–Ω`)

    // Restart with new params --------------------------------------------------
    scrapper.startScrapping(arrayOfAccs)
    // --------------------------------------------------------------------------
}